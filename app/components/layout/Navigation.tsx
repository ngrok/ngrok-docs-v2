import clsx from "clsx";
import { NavLink, useLoaderData, useRouteLoaderData } from "@remix-run/react";
import { Button } from "@ngrok/mantle/button";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@ngrok/mantle/hover-card";
import { Icon } from "@ngrok/mantle/icon";
import { CaretDown } from "@phosphor-icons/react";
import { DocsLoaderData } from "~/routes/docs+/route";
import { SidebarItem } from "~/utils/sidebar";
import { doNormalizedPathsMatch } from "~/utils/redirects/pathMethods";

/**
 * Get sidebar data, and show it based on active bucket.
 * If an item doesn't have a path:
 *  - If it has children, link it to the first child.
 *  - If it has no children, link it to the bucket path.
 * If a bucket has a path, and none of its children share that path, list it as the first child with an "Overview" label.
 * If more than x children exist, show a "More" button that links to the bucket path or overview.
 */

export default function Navigation(props: any) {
  const data = useRouteLoaderData<DocsLoaderData>("routes/docs+/route");
  const sidebarData = data?.sidebarData;
  if (!sidebarData || sidebarData.length === 0) {
    return null;
  }

  return (
    <div
      className={clsx(
        `ml-2 relative flex-grow basis-0 items-center space-x-3 hidden md:block`,
        props.className
      )}
    >
      {sidebarData.map((bucket: SidebarItem) => {
        return (
          <HoverCard key={`${bucket.title}-${bucket.path}`}>
            <HoverCardTrigger asChild>
              <Button appearance="link" type="button">
                {bucket.title}{" "}
                {bucket.children?.length === 0 ? (
                  <Icon svg={<CaretDown />} />
                ) : null}
              </Button>
            </HoverCardTrigger>
            {(
              <HoverCardContent className="flex flex-col">
                {/* Get sidebar data for the bucket here*/}
                {bucket.path && generateOverviewItemIfNeeded(bucket)}
                {bucket.children?.map((item: SidebarItem) => {                                  
                  if(!item){
                    console.warn("Sidebar item is null or undefined", item, bucket);
                    return null;
                  }
                  if(item.isAutoGenerated) {
                    // If the item is auto-generated, skip it
                    // This is temporary. When we implement the
                    // "More" item, we will include auto-generated
                    // lists, since they won't overflow the container
                    return null;
                  }
                  const itemPath = item?.path ||  getItemPath(item, bucket);       
                  return (
                    <NavLink
                      key={item.path + item.title}
                      to={itemPath}
                      prefetch="intent"
                      aria-label={item.title}
                      className={({ isActive }) =>
                        clsx(
                          "w-full hover:text-sky-500",
                          isActive
                            ? "font-semibold text-sky-500 before:bg-sky-500"
                            : "text-black before:hidden before:bg-slate-300 hover:text-slate-600"
                        )
                      }
                    >
                      {item.title}
                    </NavLink>
                  );
                })}
              </HoverCardContent>
            )}
          </HoverCard>
        );
      })}
    </div>
  );
}

function getItemPath(item: SidebarItem, bucket: SidebarItem) {
  // If no path, link to the first child or bucket path
  if (item?.children && item.children.length > 0) {
    return item.children[0].path || bucket.path;
  }

  if(!bucket.path){
    throw new Error("No viable path found for item: " + item.title);
  }
  return bucket.path;
}

function generateOverviewItemIfNeeded(bucket: SidebarItem) {
  // If the bucket has a path, and none of its children share that path, list it as the first child with an "Overview" label.
  if (bucket.path && !bucket.children?.some((item) => doNormalizedPathsMatch(item.path, bucket.path))) {
    return (
      <NavLink
        to={bucket.path}
        prefetch="intent"
        aria-label={`${bucket.title} Overview`}
        className={({ isActive }) =>
          clsx(
            "w-full hover:text-sky-500",
            isActive
              ? "font-semibold text-sky-500 before:bg-sky-500"
              : "text-black before:hidden before:bg-slate-300 hover:text-slate-600"
          )
        }
      >
        Overview
      </NavLink>
    );
  }
  return null;
} 