import {
  Accordion,
  AccordionContent,
  AccordionHeading,
  AccordionItem,
  AccordionTrigger,
  AccordionTriggerIcon,
} from "@ngrok/mantle/accordion";
import { HorizontalSeparatorGroup, Separator } from "@ngrok/mantle/separator";
import { Link, useLoaderData, useLocation } from "@remix-run/react";
import type { SidebarItem } from "~/utils/sidebar";
import { CustomDocSearch } from "@components/CustomDocSearch";
import clsx from "clsx";
import { LoaderData } from "~/root";
import { useEffect, useRef, useState } from "react";

/**
 * Layout:
 * TODO:
 * - Render the "autogenerated" sections, or really just manually enter those
 */

/**
 * Behavior:
 * TODO:
 * - Make the accordion containing the page you're on open automatically
 * - Scrollto the item representing the page you're on
 * - Make the page you're on highlighted
 */

const SectionChildren = ({ items }: { items: SidebarItem["children"] }) => {
  const { pathname } = useLocation();

  return (
    <ul>
      {items?.map((item: any, key) => {
        if (!item) return null;        
        const itemRef = useRef<HTMLLIElement | null>(null);
        const [isActive, setIsActive] = useState(false);
        
        useEffect(() => {
          setIsActive(pathname === item.path);
          if (isActive && itemRef.current) {
            itemRef.current.scrollIntoView({
              behavior: "smooth",
              block: "center",
              inline: "nearest",
            });
          }
        }, [isActive]);
        return (
          <li key={`${key}${item.path || item.title}`}>
            {item?.children?.length > 0 ? (
              <SidebarSection sectionItem={item} />
            ) : (
              <NavItem path={item.path} title={item.title} />
            )}
          </li>
        );
      })}
    </ul>
  );
};

const NonCollapsibleSection = ({
  item,
  children,
}: {
  item: SidebarItem;
  children: any;
}) => {
  return (
    <>
      <HorizontalSeparatorGroup>
        <Separator />
        <span>{item.title}</span>
        <Separator />
      </HorizontalSeparatorGroup>
      {children}
    </>
  );
};

const SectionTitle = ({ item }: { item: SidebarItem }) => {
  return (
    <div className="flex">
      {item.path ? (
        <NavItem path={item.path.split("index")[0]} title={item.title} />
      ) : (
        item.title
      )}
      <AccordionTrigger>
        <AccordionTriggerIcon />
      </AccordionTrigger>
    </div>
  );
};

export const SidebarSection = ({
  sectionItem,
}: {
  sectionItem: SidebarItem;
}) => {
  if (!sectionItem.collapsible) {
    return (
      <NonCollapsibleSection item={sectionItem}>
        <SectionChildren items={sectionItem.children} />
      </NonCollapsibleSection>
    );
  }
  return (
    <Accordion type="multiple">
      <AccordionItem value={sectionItem.title}>
        <AccordionHeading asChild>
          <SectionTitle item={sectionItem} />
        </AccordionHeading>
        <AccordionContent className="ml-5 flex flex-col">
          <SectionChildren items={sectionItem.children} />
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  );
};

const SidebarDivider = ({ title }: { title: string }) => {
  if (!title) return <Separator orientation="vertical" />;
  return (
    <HorizontalSeparatorGroup>
      <Separator />
      <span>{title}</span>
      <Separator />
    </HorizontalSeparatorGroup>
  );
};

const NavItem = ({
  path,
  title,
}: {
  path: SidebarItem["path"];
  title: SidebarItem["title"];
}) => {
  return <Link to={path}>{title}</Link>;
};

export const Sidebar = ({ className, algoliaInfo }: any) => {
  const data = useLoaderData<LoaderData>();
  return (
    <nav className={clsx("", className)}>
      <CustomDocSearch algoliaInfo={algoliaInfo} />
      <div className="sticky top-0 self-start h-[calc(100vh-4rem)] w-64 overflow-y-auto pr-8 xl:w-72 xl:pr-16">
      <ul className="list-none" role="list">
        {data?.sidebar &&
          data.sidebar.map((topLevelItem: SidebarItem) => {
            const { children, path, divider, title } = topLevelItem;
            // if (path?.includes("integration")) {
            //   console.log("Integration sidebar item", topLevelItem);
            // }
            if (divider) {
              return <SidebarDivider key={path || title} title={title} />;
            }
            return (
              <li key={topLevelItem.path || topLevelItem.title}>
                {children && children?.length > 0 ? (
                  <SidebarSection sectionItem={topLevelItem} />
                ) : (
                  <NavItem
                    path={topLevelItem.path}
                    title={topLevelItem.title}
                  />
                )}
              </li>
            );
          })}
      </ul>
      </div>
    </nav>
  );
};
