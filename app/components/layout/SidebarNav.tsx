import {
  Accordion,
  AccordionContent,
  AccordionHeading,
  AccordionItem,
  AccordionTrigger,
  AccordionTriggerIcon,
} from "@ngrok/mantle/accordion";
import { HorizontalSeparatorGroup, Separator } from "@ngrok/mantle/separator";
import { Await, Link } from "@remix-run/react";
import type { SidebarItem } from "~/utils/sidebar";
import { getSidebar } from "~/utils/sidebar";
import { CustomDocSearch } from "@components/CustomDocSearch";
import clsx from "clsx";
import { Suspense } from "react";

/**
 * Layout:
 * TODO:
 * - Render the "autogenerated" sections, or really just manually enter those
 */

/**
 * Behavior:
 * TODO:
 * - Make the accordion containing the page you're on open automatically
 * - Scrollto the item representing the page you're on
 * - Make the page you're on highlighted
 */

const SectionChildren = ({ items }: { items: SidebarItem.children }) => {
  return (
    <ul>
      {items.map((item: any) => {
        if (!item) return null;
        return (
          <li key={item.path || item.title}>
            {item?.children?.length > 0 ? (
              <SidebarSection sectionItem={item} />
            ) : (
              <NavItem path={item.path} title={item.title} />
            )}
          </li>
        );
      })}
    </ul>
  );
};

const NonCollapsibleSection = ({
  item,
  children,
}: {
  item: SidebarItem;
  children: any;
}) => {
  return (
    <>
      <HorizontalSeparatorGroup>
        <Separator />
        <span>{item.title}</span>
        <Separator />
      </HorizontalSeparatorGroup>
      {children}
    </>
  );
};

const SectionTitle = ({ item }: { item: SidebarItem }) => {
  return (
    <div className="flex">
      {item.path ? (
        <NavItem path={item.path.split("index")[0]} title={item.title} />
      ) : (
        item.title
      )}
      <AccordionTrigger>
        <AccordionTriggerIcon />
      </AccordionTrigger>
    </div>
  );
};

export const SidebarSection = ({
  sectionItem,
}: {
  sectionItem: SidebarItem;
}) => {
  if (!sectionItem.collapsible) {
    return (
      <NonCollapsibleSection item={sectionItem}>
        <SectionChildren items={sectionItem.children} />
      </NonCollapsibleSection>
    );
  }
  return (
    <Accordion type="multiple">
      <AccordionItem value={sectionItem.title}>
        <AccordionHeading asChild>
          <SectionTitle item={sectionItem} />
        </AccordionHeading>
        <AccordionContent className="ml-5 flex flex-col">
          <SectionChildren items={sectionItem.children} />
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  );
};

const SidebarDivider = ({ title }: { title: string }) => {
  if (!title) return <Separator orientation="vertical" />;
  return (
    <HorizontalSeparatorGroup>
      <Separator />
      <span>{title}</span>
      <Separator />
    </HorizontalSeparatorGroup>
  );
};

const NavItem = ({
  path,
  title,
}: {
  path: SidebarItem["path"];
  title: SidebarItem["title"];
}) => {
  return <Link to={path}>{title}</Link>;
};

export const SidebarNav = ({ className, algoliaInfo }: any) => (
  <Suspense fallback={<div>Loading...</div>}>
    <Await resolve={getSidebar()}>
      {(sidebarPromises: any[]) => {
        const sidebar = sidebarPromises.map((item: any) => item.value);
        return (
          <nav className={clsx("", className)}>
            <CustomDocSearch algoliaInfo={algoliaInfo} />
            <ul className="list-none" role="list">
              {sidebar &&
                sidebar.map((topLevelItem: SidebarItem) => {
                  if (topLevelItem.divider) {
                    return (
                      <SidebarDivider
                        key={topLevelItem.path || topLevelItem.title}
                        title={topLevelItem.title}
                      />
                    );
                  }
                  return (
                    <li key={topLevelItem.path || topLevelItem.title}>
                      {topLevelItem?.children?.length > 0 ? (
                        <SidebarSection sectionItem={topLevelItem} />
                      ) : (
                        <NavItem
                          path={topLevelItem.path}
                          title={topLevelItem.title}
                        />
                      )}
                    </li>
                  );
                })}
            </ul>
          </nav>
        );
      }}
    </Await>
  </Suspense>
);
