import { getItemsFromDir, getSidebarItemAtPath } from "./getSidebarData";
import { docusaurusSidebar } from "./docusaurusSidebar";

export type SidebarItem = {
  title?: string;
  path?: string;
  children?: SidebarItem[];
  divider?: boolean;
  collapsible?: boolean;
};
const getItemFromString = async (
  itemPath: string
): Promise<SidebarItem | null> => {
  const data = await getSidebarItemAtPath(itemPath);
  if (!data) {
    throw new Error(`No file found for sidebar item: ${itemPath}`);
  }

  return {
    path: data.path,
    title:
      data.frontmatter?.title ||
      data.headings.find((item: any) => item.depth === 1)?.value,
    children: [],
  };
};

const getChildrenData = async (childItem: any, path: string) => {
  return Promise.allSettled(
    childItem.map(async (child: string | any) => {
      const childType = typeof child;
      switch (childType) {
        case "string":
          return await getItemFromString(child);
        case "object":
          if (child?.type === "autogenerated") {
            return await getItemsFromDir(child.dirName, path);
          }
          return await getItemFromObject(child);
      }
    })
  );
};

const getItemFromObject = async (docusaurusObject: any) => {
  const path = "/docs/" + docusaurusObject?.link?.id.split("/index")[0];
  const childrenData = await getChildrenData(docusaurusObject.items, path);

  return {
    title: docusaurusObject.label,
    path,
    // children: [],
    children: !docusaurusObject.items
      ? []
      : childrenData.map((item: any) => item.value),
    collapsible:
      docusaurusObject.collapsible !== undefined
        ? docusaurusObject.collapsible
        : true,
  };
};

/**
 * Make this just work if the item is formatted properly already
 */
export const getSidebar = async () => {
  return Promise.allSettled(
    docusaurusSidebar.map(async (navItem: any) => {
      if (typeof navItem === "string") {
        return await getItemFromString(navItem);
      }
      if (navItem.type === "html") {
        return {
          title: navItem.value,
          divider: true,
        };
      }
      return await getItemFromObject(navItem);
    })
  );
};
